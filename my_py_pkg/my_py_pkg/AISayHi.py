#!/usr/bin/env python3
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import threading
import rclpy
from rclpy.node import Node
from custom_msg_srv.msg import String

from custom_msg_srv.srv import Control
from custom_msg_srv.srv import Direction

import subprocess as sp
import cv2
import time
import serial 

NODE = None
GUI = None
send = ""
last_send = ""
data = ""
stopfunc = False
class MyNode(Node):
    
    def __init__(self):
        super().__init__('py_ai_sayhi_node')
            
        self.create_subscription(msg_type=String,topic="/control_topic",callback=self.callback_control,qos_profile=10)
    
        self.create_subscription(msg_type=String,topic="/command_topic",callback=self.close_node,qos_profile=10)
        
        self.pub_sound = self.create_publisher(msg_type=String, topic="/sound_request_topic", qos_profile=10)
    
    def close_node(self,msg:String):
        global data
        data = msg.msg
        self.get_logger().info(msg.msg)        

    def callback_control(self,msg:String):
       	self.get_logger().info(msg.msg)

patch_student = '/home/pi/AI_path/student_cascade.xml'  # PATH OF THE CASCADE
patch_upperbody = '/home/pi/AI_path/haarcascade_upperbody2.xml'
patch_face = '/home/pi/AI_path/haarcascade_frontalface_default.xml'
cameraNo = '/dev/video0'#   0||'/dev/video0'  # CAMERA NUMBER
#cameraNo2 = 1
objectName = 'Student'  # OBJECT NAME TO DISPLAY
objectName2 = 'Body'
objectName3 = 'face'
frameWidth = 256  # DISPLAY WIDTH
frameHeight = 192  # DISPLAY HEIGHT
color = (255, 0, 0)  # Blue
color2 = (0, 255, 0)  # Green
color3 = (0, 0, 255)  # Red
cap = cv2.VideoCapture(cameraNo)######
last_x = None

def Sayhirun():
    NODE = MyNode()
    global data
    global stopfunc
    # Result()
    # LOAD THE CLASSIFIERS DOWNLOADED
    
    cascade_student = cv2.CascadeClassifier(patch_student)
    cascade_face = cv2.CascadeClassifier(patch_face)
    stopfunc = False
    human = False
    student = False
    onectime = False
    
    NODE.get_logger().info("Open")
    while True:
        # cameraBrightness = cv2.getTrackbarPos("Brightness_1", "Result")
        cap.set(10, 15)
        success, img = cap.read()
        
        img = cv2.resize(img, (frameWidth, frameHeight))
        
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        # DETECT THE OBJECT USING THE CASCADE
        # scaleVal = 1 + (cv2.getTrackbarPos("Scale_1", "Result") / 1000)
        # neig = cv2.getTrackbarPos("Neig_1", "Result")

        # scaleVal3 = 1 + (cv2.getTrackbarPos("Scale_3", "Result") / 1000)
        # neig3 = cv2.getTrackbarPos("Neig_3", "Result")

        objects = cascade_student.detectMultiScale(gray,scaleFactor = 1.1, minNeighbors = 2)
        objects3 = cascade_face.detectMultiScale(gray,scaleFactor = 1.2, minNeighbors = 2)
        # ----------------------------------------------------------------
        # DISPLAY THE DETECTED OBJECTS
        num = 0
        num2 = 0
        num3 = 0
        human = False
        student = False
        for (xf, yf, wf, hf) in objects3:  # inFace
            areaf = wf * hf
            # minAreaf = cv2.getTrackbarPos("Min Area_3", "Result")
            human = False
            if areaf > 0:
                cenx = int(xf + (wf * 0.5))
                ceny = int(yf + (hf * 0.5))
                cv2.rectangle(img, (xf, yf), (xf + wf, yf + hf), color3, 3)
                cv2.circle(img, (cenx, ceny), 5, (0, 255, 0), -1)
                num3 += 1
                human = True

                for (x, y, w, h) in objects:  # inStudent

                    area = w * h
                    # minArea = cv2.getTrackbarPos("Min Area_1", "Result")

                    student = False
                    if area > 0:
                        cv2.rectangle(img, (x, y), (x + w, y + h), color, 3)
                        cv2.putText(img, objectName3 + " " + objectName + str(num3 + 1), (xf, yf - 5),
                                    cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, color, 2)
                        num += 1
                        student = True
                    else:
                        student = False
                cv2.putText(img, objectName3, (xf, yf - 5), cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, color3, 2)
            else:
                human = False
        count = "Student = " + str(num)
        cv2.putText(img, count, (0, 30), cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, (255, 0, 0), 1)
        count3 = "face= " + str(num3)
        cv2.putText(img, count3, (0, 90), cv2.FONT_HERSHEY_COMPLEX_SMALL, 1, (255, 0, 0), 1)

        cv2.imshow("AI1", img)
        if cv2.waitKey(1) & 0xFF == ord('q') or data == "AI_Sayhi close":
            stopfunc = True
            NODE.get_logger().info("Stop")
            cv2.destroyAllWindows()
            break    
        #if stopfunc == True:
        #    cv2.destroyAllWindows()
        #    break
        if onectime == False:
            if human == True:
                if student == True:
                    msg = String()
                    data = str("Student")
                    msg.msg = data
                    NODE.pub_sound.publish(msg=msg)
                    
                    onectime = True
                else:
                    msg = String()
                    data = str("Normal")
                    msg.msg = data
                    NODE.pub_sound.publish(msg=msg)
                    
                    onectime = True
            else:
                pass
        if onectime == True:
            if human == False:
                onectime = False
            else:
                pass
        print(onectime, human, student)
    cap.release()
    cv2.destroyAllWindows()



def main():
    rclpy.init()
    
    NODE = MyNode()
    thread_spin = threading.Thread(target=rclpy.spin,args=(NODE, ))
    thread_spin.start()

    Sayhirun()
    
    NODE.destroy_node()
    rclpy.shutdown()
    thread_spin.join()
    
if __name__ == '__main__':
	main()
    
