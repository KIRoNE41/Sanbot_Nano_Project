#!/usr/bin/env python3
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer
import threading
import rclpy
from rclpy.node import Node
from custom_msg_srv.msg import String

from custom_msg_srv.srv import Control
from custom_msg_srv.srv import Command
from custom_msg_srv.srv import Direction
from custom_msg_srv.srv import Speed
import subprocess as sp
from datetime import date
from tkinter import *
import tkinter as tk                # python 3
from tkinter import font as tkfont  # python 3
from PIL import Image,ImageTk
from gtts import gTTS
from mutagen.mp3 import MP3
import google.generativeai as genai
from pathlib import Path
import time
import pygame
import cv2
import speech_recognition as sr
pygame.init()
pygame.mixer.init()

API_KEY = 'AIzaSyAZRz4ip2jQbfKyB6bZy6B3e5kSTbpjYAg'
        #chat_log = []
genai.configure(
    api_key=API_KEY
)
model = genai.GenerativeModel('gemini-pro')


NODE = None
GUI = None
sound_data = ""
def resizex(x):
    oldscale_width = 1280
    # newscale_width = tk.Tk().winfo_width()
    newscale_width = 1024
    widthper =  newscale_width/oldscale_width
    newx = x * widthper
    return newx
def resizey(y):
    oldscale_height = 720
    # newscale_height = tk.Tk().winfo_height()
    newscale_height = 600
    heightper = newscale_height/oldscale_height
    newy = y * heightper
    return newy
def resizeimg(path):
    img = Image.open(path)
    imgsize_w,imgsize_h = img.size
    new_w = int(resizex(imgsize_w))
    new_h = int(resizey(imgsize_h))
    reimg = img.resize((new_w,new_h))
    return reimg    
# def resizebutton(x,y,width,height):
#     newx = int(resizex(x))
#     newy = int(resizey(y))
#     newwidth = int(resizex(width))
#     newheight = int(resizey(height))
#     # new = (x=newx,y=newy,width=newwidth,heigyht=newheight) 
#     return newx,newy,newwidth,newheight

class MyNode(Node):
    #GUI = Start()
    global sound_data
    def __init__(self):
        super().__init__('gui_test_pub')
#        self.srv_gui_client = self.create_client(srv_type=Control,srv_name="/control/send_message")
#        while not self.srv_gui_client.wait_for_service(timeout_sec=1.0) and stoprun == False:
#            self.get_logger().info("Waiting for service /control/send_message")
        
        self.srv_gui_direction_client = self.create_client(srv_type=Direction,srv_name="/direction/send_message")
        while not self.srv_gui_direction_client.wait_for_service(timeout_sec=1.0) and stoprun == False:
            self.get_logger().info("Waiting for service /direction/send_message")
        
        self.srv_gui_speed_client = self.create_client(srv_type=Speed,srv_name="/speed/send_message")
        while not self.srv_gui_speed_client.wait_for_service(timeout_sec=1.0) and stoprun == False:
            self.get_logger().info("Waiting for service /speed/send_message")
            
            
        self.create_subscription(msg_type=String,topic="/control_topic",callback=self.callback_command,qos_profile=10)

        self.create_subscription(msg_type=String,topic="/sound_request_topic",callback=self.callback_sound_request,qos_profile=10)
        
        self.create_subscription(msg_type=String,topic="/sound_control_topic",callback=self.callback_sound_command,qos_profile=10)
        
        self.pub_command = self.create_publisher(msg_type=String, topic="/command_topic", qos_profile=10)


#    def call_srv_client(self,direction:str,speed:int):
#        request = Control.Request()
#        request.direction = direction
#        request.speed = speed
#        self.srv_gui_client.call_async(request=request)
    

    def call_srv_direction_client(self,direction:str):
        request = Direction.Request()
        request.direction = direction
        self.srv_gui_direction_client.call_async(request=request)
    
    def call_srv_speed_client(self,spd1:int,spd2:int):
        requestspeed = Speed.Request()
        requestspeed.firstspeed = spd1
        requestspeed.secondspeed = spd2
        self.srv_gui_speed_client.call_async(request=requestspeed)

    def callback_command(self,msg:String):
       	self.get_logger().info(msg.msg)
    
    def callback_sound_request(self,msg:String):
        global sound_request
        sound_request = msg.msg
        self.get_logger().info(sound_request)
        LoadSound1(sound_request)
       	
    def callback_sound_command(self,msg:String):
        global sound_data
        sound_data = msg.msg
        self.get_logger().info(sound_data)
        page(sound_data)
        
class Start(tk.Tk):
    global sound_data
    def __init__(self, *args, **kwargs):
        global sound_data    
        tk.Tk.__init__(self, *args, **kwargs)
        # the container is where we'll stack a bunch of frames
        # on top of each other, then the one we want visible
        # will be raised above the others
        container = tk.Frame(self)
    
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)
        container.grid_rowconfigure(0, minsize=600, weight=1)
        container.grid_columnconfigure(0, minsize=1024, weight=1)
        container.grid_columnconfigure(1, weight=1)


        self.frames = {}
        for F in (Home,SayHi,Follow,PosMain,Pos,Teacher,TeacherC,TeacherS,TeacherShow,Ask,Setting,ControlArrow,ControlSpeed):
            page_name = F.__name__
            frame = F(parent=container, controller=self)
            self.frames[page_name] = frame

            # put all of the pages in the same location;
            # the one on the top of the stacking order
            # will be the one that is visible.
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame("Home")
        
        

    def show_frame(self, page_name):
        '''Show a frame for the given page name'''
        frame = self.frames[page_name]
        frame.tkraise()
        


#def main(args=None):
#    rclpy.init(args=args)
#    node = MyNode()
#    rclpy.spin(node)
#    app = Start() 
#    app.mainloop()
#    rclpy.shutdown()

class Home(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
            
        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
        from PIL import Image,ImageTk


        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame0")



        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)
        


        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)

        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            int(resizex(640)),
            int(resizey(93)),
            image=image_image_1
        )
        canvas.photo = image_image_1
        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_1.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"), controller.show_frame("SayHi"),],
            relief="flat"
        )
        button_1.place(
            x=resizex(462.0),
            y=resizey(207.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_1.photo = button_image_1

        button_img2 = resizeimg(relative_to_assets("button_2.png"))
        button_image_2 = ImageTk.PhotoImage(
            button_img2)
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_2 clicked"),controller.show_frame("Follow"),],
            relief="flat"
        )
        button_2.place(
            x=resizex(462.0),
            y=resizey(304.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_2.photo = button_image_2
        # button_img_3
        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),controller.show_frame("PosMain")],
            relief="flat"
        )
        button_3.place(
            x=resizex(462.0),
            y=resizey(401.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_3.photo = button_image_3

        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_4 clicked"),controller.show_frame("Teacher")],
            relief="flat"
        )
        button_4.place(
            x=resizex(462.0),
            y=resizey(496.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_4.photo = button_image_4

        button_image_5 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_5.png")))
        button_5 = Button(
            canvas,
            image=button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_5 clicked"),controller.show_frame("Ask")],
            relief="flat"
        )
        button_5.place(
            x=resizex(462.0),
            y=resizey(593.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_5.photo = button_image_5

        button_image_6 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_6.png")))
        button_6 = Button(
            canvas,
            image=button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_6 clicked"),controller.show_frame("Setting")],
            relief="flat"
        )
        button_6.place(
            x=resizex(1152.0),
            y=resizey(10.0),
            width=resizex(120.0),
            height=resizey(72.0)
        )
        button_6.photo = button_image_6

OUTPUT_PATH = Path(__file__).parent
SOUND_PATH = OUTPUT_PATH / Path(r"buildMain/sound")

def relative_to_sound(path: str) -> Path:
    return SOUND_PATH / Path(path)

GPTMP3 = relative_to_sound("gpt.mp3")
HiMP3 = relative_to_sound("Hi.mp3")
HiStMP3 = relative_to_sound("Histudent.mp3")

hisound = gTTS(text="สวัสดีครับ", lang='th', slow=False)
hisound.save(HiMP3)
radiohi = MP3(HiMP3)
timehidelay = radiohi.info.length

studentsound = gTTS(text="สวัสดีครับนักเรียน", lang='th', slow=False)
studentsound.save(HiStMP3)
radiostudent = MP3(HiStMP3)
timestudentdelay = radiostudent.info.length

################################################################
patch_student = '/home/pi/AI_path/student_cascade.xml'  # PATH OF THE CASCADE
patch_face = '/home/pi/AI_path/haarcascade_frontalface_default.xml'
cameraNo = '/dev/video0'#   0||'/dev/video0'  # CAMERA NUMBER
9#cameraNo = 0#   0||'/dev/video0'  # CAMERA NUMBER
objectName = 'Student'  # OBJECT NAME TO DISPLAY
objectName3 = 'face'
frameWidth = 256  # DISPLAY WIDTH
frameHeight = 192  # DISPLAY HEIGHT
color = (255, 0, 0)  # Blue
color3 = (0, 0, 255)  # Red
global stopfunc

def LoadSound1(comesound):
    if comesound == "Normal":
        sound = HiMP3
        timedelay = timehidelay
    if comesound == "Student":
        sound = HiStMP3
        timedelay = timestudentdelay
    pygame.mixer.music.load(sound)
    pygame.mixer.music.play()
    time.sleep(timedelay + 0.5)
    pygame.mixer.music.stop()
    pygame.mixer.music.unload()

def run_ai_sayhi(s):        
    NODE = MyNode()
    cmd = ["ros2","run","my_py_pkg","py_ai_sayhi_node"]
    if s == "open":

        proc = sp.Popen(cmd)

        time.sleep(1)
        #pass    
    if s == "close":
        msg = String()
        data = str("AI_Sayhi close")
        msg.msg = data
        NODE.pub_command.publish(msg=msg)
        #proc.terminate()

class SayHi(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
    
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
        import cv2
        import time
        import pygame
        from PIL import Image, ImageTk
        import speech_recognition as sr
        from gtts import gTTS
        from mutagen.mp3 import MP3


        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame1")
        SOUND_PATH = OUTPUT_PATH / Path(r"buildMain/sound")
        AI_PATH = OUTPUT_PATH / Path(r"buildMain/ai_path")

        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        #############Set GPT################################

        pygame.init()
        pygame.mixer.init()

        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)
        def relative_to_sound(path: str) -> Path:
            return SOUND_PATH / Path(path)
        def relative_to_ai(path: str) -> Path:
            return AI_PATH / Path(path)
        
        # def empty(a):
        #     pass
        # def Result():
        #     cv2.namedWindow("Result",cv2.WINDOW_NORMAL)
        #     cv2.resizeWindow("Result", frameWidth, frameHeight + 100)
        #     cv2.createTrackbar("Brightness_1", "Result", 180, 255, empty)
        #     cv2.createTrackbar("Scale_1", "Result", 400, 1000, empty)
        #     cv2.createTrackbar("Neig_1", "Result", 8, 50, empty)
        #     cv2.createTrackbar("Min Area_1", "Result", 0, 100000, empty)

        #     cv2.createTrackbar("Scale_2", "Result", 400, 1000, empty)
        #     cv2.createTrackbar("Neig_2", "Result", 8, 50, empty)
        #     cv2.createTrackbar("Min Area_2", "Result", 0, 100000, empty)

        #     cv2.createTrackbar("Scale_3", "Result", 400, 1000, empty)
        #     cv2.createTrackbar("Neig_3", "Result", 8, 50, empty)
        #     cv2.createTrackbar("Min Area_3", "Result", 0, 100000, empty)
        

        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        canvas.photo = image_image_1

        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_1.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked & RUN!!"),run_ai_sayhi("open")],
            relief="flat"
        )
        button_1.place(
            x=resizex(458.0),
            y=resizey(219.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_1.photo = button_image_1

        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_2.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_2 clicked"),run_ai_sayhi("close")],
            relief="flat"
        )
        button_2.place(
            x=resizex(462.0),
            y=resizey(401.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_2.photo = button_image_2

        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),controller.show_frame("Home"),run_ai_sayhi("close")],
            relief="flat"
        )
        button_3.place(
            x=resizex(462.0),
            y=resizey(593.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_3.photo = button_image_3

        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_4 clicked"),],
            relief="flat"
        )
        button_4.place(
            x=resizex(1152.0),
            y=resizey(10.0),
            width=resizex(120.0),
            height=resizey(72.0)
        )
        
        button_4.photo = button_image_4

def run_ai_follow(s):        
    NODE = MyNode()
    cmd = ["ros2","run","my_py_pkg","py_ai_follow_node"]
    if s == "open":
        proc = sp.Popen(cmd)

        time.sleep(1)
        #pass    
    if s == "close":
        msg = String()
        data = str("AI_Follow close")
        msg.msg = data
        NODE.pub_command.publish(msg=msg)
        #proc.terminate()

class Follow(tk.Frame):
     def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        NODE = MyNode()
        from pathlib import Path
        import time
        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
	    
        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame2")
        
            

        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)


        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        canvas.photo = image_image_1
        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_1.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda:[ print("button_1 clicked"),
            run_ai_follow("open")],
            relief="flat"
        )
        button_1.place(
            x=resizex(458.0),
            y=resizey(219.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_1.photo = button_image_1
        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_2.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_2 clicked"),
            run_ai_follow("close")],
            relief="flat"
        )
        button_2.place(
            x=resizex(462.0),
            y=resizey(401.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_2.photo = button_image_2
        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),controller.show_frame("Home")],
            relief="flat"
        )
        button_3.place(
            x=resizex(462.0),
            y=resizey(593.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_3.photo = button_image_3
        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_4 clicked")],
            relief="flat"
        )
        button_4.place(
            x=resizex(1152.0),
            y=resizey(10.0),
            width=resizex(120.0),
            height=resizey(72.0)
        )
        button_4.photo = button_image_4
TargetPos = ""
def Position(pos):
    global TargetPos
    TargetPos = pos
    print("Change Position "+TargetPos)

class PosMain(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        NODE = MyNode()
        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame3(1)")


        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)

        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        canvas.photo = image_image_1

        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_1.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"),Position("MainHall"),controller.show_frame("Pos")],
            relief="flat"
        )
        button_1.place(
            x=resizex(66.0),
            y=resizey(297.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_1.photo = button_image_1

        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_2.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_2 clicked"),Position("ManToilet"),controller.show_frame("Pos")],
            relief="flat"
        )
        button_2.place(
            x=resizex(462.0),
            y=resizey(296.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_2.photo = button_image_2

        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),Position("WomanToilet"),controller.show_frame("Pos")],
            relief="flat"
        )
        button_3.place(
            x=resizex(858.0),
            y=resizey(297.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_3.photo = button_image_3

        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_4 clicked"),controller.show_frame("Home")],
            relief="flat"
        )
        button_4.place(
            x=resizex(462.0),
            y=resizey(593.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_4.photo = button_image_4

        button_image_5 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_5.png")))
        button_5 = Button(
            canvas,
            image=button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_5 clicked"),
            relief="flat"
        )
        button_5.place(
            x=resizex(1152.0),
            y=resizey(10.0),
            width=resizex(121.0),
            height=resizey(72.0)
        )
        button_5.photo = button_image_5

def run_ai_pos(s):        
    NODE = MyNode()
    global TargetPos
    cmd2 = ["ros2","run","my_py_pkg","py_ai_pos_node"]
    if s == "open":
        
        proc2 = sp.Popen(cmd2)
        time.sleep(5)
        msg = String()
        data = str(TargetPos)
        msg.msg = data
        NODE.pub_command.publish(msg=msg)
        #NODE.srv_gui_client = NODE.create_client(srv_type=Command,srv_name="/py_ai_follow_node/send_message")
        
        #pass    
    if s == "close":
        msg = String()
        data = str("AI_Pos close")
        msg.msg = data
        NODE.pub_command.publish(msg=msg)

class Pos(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        global TargetPos
        from pathlib import Path
        
        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
        import time
        NODE = MyNode()
        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame3(2)")
        
                #proc.terminate()

        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)

        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        canvas.photo = image_image_1
        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_1.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"),print(TargetPos+" RUN!"),run_ai_pos("open")],
            relief="flat"
        )
        button_1.place(
            x=resizex(458.0),
            y=resizey(219.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_1.photo = button_image_1

        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_2.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_2 clicked"),run_ai_pos("close")],
            relief="flat"
        )
        button_2.place(
            x=resizex(462.0),
            y=resizey(401.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_2.photo = button_image_2

        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),controller.show_frame("PosMain")],
            relief="flat"
        )
        button_3.place(
            x=resizex(462.0),
            y=resizey(593.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_3.photo = button_image_3

        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_4 clicked"),
            relief="flat"
        )
        button_4.place(
            x=resizex(1152.0),
            y=resizey(10.0),
            width=resizex(120.0),
            height=resizey(72.0)
        )
        button_4.photo = button_image_4

class Teacher(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame4")


        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)

        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1280,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        canvas.photo = image_image_1

        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_1.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"),controller.show_frame("TeacherS")],
            relief="flat"
        )
        button_1.place(
            x=resizex(214.0),
            y=resizey(284.0),
            width=resizex(355.0),
            height=resizey(89.0)
        )
        button_1.photo = button_image_1

        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_2.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_2 clicked"),controller.show_frame("TeacherC")],
            relief="flat"
        )
        button_2.place(
            x=resizex(697.0),
            y=resizey(284.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_2.photo = button_image_2

        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),controller.show_frame("Home")],
            relief="flat"
        )
        button_3.place(
            x=resizex(462.0),
            y=resizey(593.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_3.photo = button_image_3

        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_4 clicked"),
            relief="flat"
        )
        button_4.place(
            x=resizex(1152.0),
            y=resizey(10.0),
            width=resizex(120.0),
            height=resizey(72.0)
        )
        button_4.photo = button_image_4

def TeacherSelect(number):
    global image_image_1
    global image_image_2
    global image_image_3
    global canvas
    OUTPUT_PATH = Path(__file__).parent
    TEACHER_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame7/teacher")
    ROOM_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame7/room")

    def relative_to_teacher(path: str) -> Path:
        return TEACHER_PATH / Path(path)
    def relative_to_room(path: str) -> Path:
        return ROOM_PATH / Path(path)

    if number == "C1":
        image_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_teacher("1.png")))
        image_2 = canvas.create_image(
            resizex(356.0),
            resizey(392.0),
            image=image_image_2
        )

        image_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_room("1.png")))
        image_3 = canvas.create_image(
            resizex(857),
            resizey(390),
            image=image_image_3
        )
        canvas.photo = [image_image_1,image_image_2,image_image_3]
    
    if number == "C2":
        image_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_teacher("2.png")))
        image_2 = canvas.create_image(
            resizex(356.0),
            resizey(392.0),
            image=image_image_2
        )

        image_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_room("2.png")))
        image_3 = canvas.create_image(
            resizex(857),
            resizey(390),
            image=image_image_3
        )
        canvas.photo = [image_image_1,image_image_2,image_image_3]
        
    if number == "C3":
        image_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_teacher("3.png")))
        image_2 = canvas.create_image(
            resizex(356.0),
            resizey(392.0),
            image=image_image_2
        )

        image_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_room("3.png")))
        image_3 = canvas.create_image(
            resizex(857),
            resizey(390),
            image=image_image_3
        )
        canvas.photo = [image_image_1,image_image_2,image_image_3]
        
    if number == "S1":
        image_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_teacher("4.png")))
        image_2 = canvas.create_image(
            resizex(356.0),
            resizey(392.0),
            image=image_image_2
        )

        image_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_room("4.png")))
        image_3 = canvas.create_image(
            resizex(857),
            resizey(390),
            image=image_image_3
        )
        canvas.photo = [image_image_1,image_image_2,image_image_3]
        
    if number == "S2":
        image_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_teacher("5.png")))
        image_2 = canvas.create_image(
            resizex(356.0),
            resizey(392.0),
            image=image_image_2
        )

        image_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_room("5.png")))
        image_3 = canvas.create_image(
            resizex(857),
            resizey(390),
            image=image_image_3
        )
        canvas.photo = [image_image_1,image_image_2,image_image_3]

    if number == "S3":
        image_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_teacher("6.png")))
        image_2 = canvas.create_image(
            resizex(356.0),
            resizey(392.0),
            image=image_image_2
        )

        image_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_room("6.png")))
        image_3 = canvas.create_image(
            resizex(857),
            resizey(390),
            image=image_image_3
        )
        canvas.photo = [image_image_1,image_image_2,image_image_3]

class TeacherC(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        
        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame5")


        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)

        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        canvas.photo = image_image_1

        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("1.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"),TeacherSelect("C1"),controller.show_frame("TeacherShow")],
            relief="flat"
        )
        button_1.place(
            x=resizex(92.0),
            y=resizey(220.0),
            width=resizex(285.0),
            height=resizey(342.0)
        )
        button_1.photo = button_image_1

        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("2.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_2 clicked"),TeacherSelect("C2"),controller.show_frame("TeacherShow")],
            relief="flat"
        )
        button_2.place(
            x=resizex(501.0),
            y=resizey(220.0),
            width=resizex(285.0),
            height=resizey(342.0)
        )
        button_2.photo = button_image_2

        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),TeacherSelect("C3"),controller.show_frame("TeacherShow")],
            relief="flat"
        )
        button_3.place(
            x=resizex(890.0),
            y=resizey(220.0),
            width=resizex(285.0),
            height=resizey(342.0)
        )
        button_3.photo = button_image_3

        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_4 clicked"),controller.show_frame("Teacher")],
            relief="flat"
        )
        button_4.place(
            x=resizex(462.0),
            y=resizey(599.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_4.photo = button_image_4

        button_image_5 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_5.png")))
        button_5 = Button(
            canvas,
            image=button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_5 clicked"),
            relief="flat"
        )
        button_5.place(
            x=resizex(1152.0),
            y=resizey(10.0),
            width=resizex(120.0),
            height=resizey(72.0)
        )
        button_5.photo = button_image_5

class TeacherS(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage


        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame6")


        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)

        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        canvas.photo = image_image_1

        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("4.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"),TeacherSelect("S1"),controller.show_frame("TeacherShow")],
            relief="flat"
        )
        button_1.place(
            x=resizex(92.0),
            y=resizey(220.0),
            width=resizex(285.0),
            height=resizey(342.0)
        )
        button_1.photo = button_image_1

        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("5.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_2 clicked"),TeacherSelect("S2"),controller.show_frame("TeacherShow")],
            relief="flat"
        )
        button_2.place(
            x=resizex(501.0),
            y=resizey(220.0),
            width=resizex(285.0),
            height=resizey(342.0)
        )
        button_2.photo = button_image_2

        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("6.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),TeacherSelect("S3"),controller.show_frame("TeacherShow")],
            relief="flat"
        )
        button_3.place(
            x=resizex(890.0),
            y=resizey(220.0),
            width=resizex(285.0),
            height=resizey(342.0)
        )
        button_3.photo = button_image_3


        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_4 clicked"),controller.show_frame("Teacher")],
            relief="flat"
        )
        button_4.place(
            x=resizex(462.0),
            y=resizey(599.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_4.photo = button_image_4

        button_image_5 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_5.png")))
        button_5 = Button(
            canvas,
            image=button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_5 clicked"),
            relief="flat"
        )
        button_5.place(
            x=resizex(1152.0),
            y=resizey(10.0),
            width=resizex(120.0),
            height=resizey(72.0)
        )
        button_5.photo = button_image_5

class TeacherShow(tk.Frame):

    
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        global image_image_2
        global image_image_3
        global image_image_1
        global canvas
        
        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
        from tkinter import font as tkfont  # python 3
        

        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame7")


        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)
        img_ref = []

        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)

        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        
        image_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_2.png")))
        image_2 = canvas.create_image(
            resizex(356.0),
            resizey(392.0),
            image=image_image_2
        )

        image_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_3.png")))
        image_3 = canvas.create_image(
            resizex(857),
            resizey(390),
            image=image_image_3
        )
        canvas.photo = [image_image_1,image_image_2,image_image_3]
        

        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_1.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"),controller.show_frame("Teacher")],
            relief="flat"
        )
        button_1.place(
            x=resizex(462.0),
            y=resizey(593.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_1.photo = button_image_1

        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_2.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_2 clicked")],
            relief="flat"
        )
        button_2.place(
            x=resizex(1152.0),
            y=resizey(10.0),
            width=resizex(120.0),
            height=resizey(72.0)
        )
        button_2.photo = button_image_2


def Unload():
    pygame.mixer.music.stop()
    pygame.mixer.music.unload()

def LoadSound(comesound, delay):
    sound = comesound
    timedelay = delay
    pygame.mixer.music.load(sound)
    pygame.mixer.music.play()
    #time.sleep(timedelay + 0.5)=
def gemini(value):
    global user_massage
    global message_history
    global app
    global model
    global GPTMP3
    chat = model.start_chat(history=[])
    user_massage = value
    global outputtext
    message_history.config(state=tk.NORMAL)
    message_history.insert(tk.END, f"You: {user_massage}\n")
    message_history.config(state=tk.DISABLED)
    app.update()
    response = chat.send_message(user_massage)

    outputtext = response.text

    myobj = gTTS(text=outputtext, lang='th', slow=False)

    myobj.save(GPTMP3)
    radio = MP3(GPTMP3)
    timedelay = radio.info.length
    
    print("Chat Gemini:", outputtext)
    message_history.config(state=tk.NORMAL)
    message_history.insert(tk.END, f"Gemini: {outputtext}\n")
    message_history.config(state=tk.DISABLED)
    app.update()
    LoadSound(GPTMP3, timedelay)
    print(timedelay)

class Ask(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
        from gtts import gTTS
        import google.generativeai as genai
        #from openai import OpenAI
        import time
        from mutagen.mp3 import MP3
        import speech_recognition as sr
        import pygame
        pygame.init()
        pygame.mixer.init()

        global message_history
        #client = OpenAI(api_key="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")
        
        textspeech = ""
        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame8")
        SOUND_PATH = OUTPUT_PATH / Path(r"buildMain/sound")


        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)
        def relative_to_sound(path: str) -> Path:
            return SOUND_PATH / Path(path)
        
        GPTMP3 = relative_to_sound("gpt.mp3")

        def Unload():
            pygame.mixer.music.stop()
            pygame.mixer.music.unload()

        def LoadSound(comesound, delay):
            sound = comesound
            timedelay = delay
            pygame.mixer.music.load(sound)
            pygame.mixer.music.play()
            #time.sleep(timedelay + 0.5)=
        def clearchat():
            entry_1.delete(0, tk.END)
            message_history.config(state=tk.NORMAL)
            message_history.delete('1.0', tk.END)
            message_history.config(state=tk.DISABLED)
        # def gpt():
        #     value = entry_1.get()
        #     print(value)
        #     user_massage = value
        #     global outputtext
        #     if user_massage.lower() == "quit" or user_massage.lower() == "ออก":
        #         outputtext = "quit"
        #     if user_massage.lower() == "clear()" or user_massage.lower() == "ล้าง()":
        #         clearchat()
        #     else:
                
        #         message_history.config(state=tk.NORMAL)
        #         message_history.insert(tk.END, f"You: {user_massage}\n")
        #         message_history.config(state=tk.DISABLED)
        #         entry_1.delete(0, tk.END)
        #         chat_log.append({"role": "user", "content": user_massage})
        #         # response = 0
        #         response = client.chat.completions.create(
        #             messages=chat_log,
        #             model="gpt-3.5-turbo",
        #         )
        #         assistant_response = response.choices[0].message.content

        #         outputtext = assistant_response.strip("\n").strip()

        #         myobj = gTTS(text=outputtext, lang='th', slow=False)

        #         myobj.save(GPTMP3)
        #         radio = MP3(GPTMP3)
        #         timedelay = radio.info.length
                
        #         print("Chat GPT:", outputtext)
        #         message_history.config(state=tk.NORMAL)
        #         message_history.insert(tk.END, f"Chat GPT: {outputtext}\n")
        #         message_history.config(state=tk.DISABLED)
        #         chat_log.append({"role": "assistant", "content": assistant_response.strip("\n").strip()})
        #         LoadSound(GPTMP3, timedelay)
        #         print(timedelay)
        
        def run():
            input_val = entry_1.get()
            entry_1.delete(0, tk.END)
            self.update()
            Unload()
            gemini(input_val)
            
        def speech():
            mic = sr.Microphone()
            recog = sr.Recognizer()
            Unload()
            global entry_1
            global textspeech
            global value
            value = entry_1.get()
            index = len(value)
            newcursor= entry_1.index(INSERT)
            print(newcursor)
            with mic as source:
                entry_1.delete(0, tk.END)
                entry_1.insert(0,"listening")
                self.update()
                print("listening")
                audio = recog.listen(source)

                try:
                    entry_1.delete(0, tk.END)
                    textspeech = recog.recognize_google(audio, language='th')
                    # print("waiting")
                    print("You Say:", textspeech,"\n",len(textspeech))
                    # cursor_text = newcursor+len(textspeech)
                    entry_1.insert(0,value)
                    entry_1.insert(newcursor,textspeech)
                    # print(cursor_text)
                    entry_1.xview("end")
                    # gpt(text)

                except:
                    print('try again please')
                    entry_1.insert(0,value)
        

        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        canvas.photo = image_image_1

        canvas.create_rectangle(
            resizex(119.0),
            resizey(203.0),
            resizex(1161.0),
            resizey(444.0),
            fill="#FFFFFF",
            outline="")

        entry_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("entry_1.png")))
        entry_bg_1 = canvas.create_image(
            resizex(549.5),
            resizey(526.0),
            image=entry_image_1
        )
        global entry_1
        entry_1 = Entry(
            canvas,
            bd=0,
            bg="#FFFFFF",
            fg="#000716",
            highlightthickness=0,
            font=("IBMPlexSansThaiLooped Medium", 50 * -1)
        )
        entry_1.place(
            x=resizex(108.0),
            y=resizey(465.0),
            width=resizex(883.0),
            height=resizey(120.0)
        )
        def message_historyX(x):
            oldfont = 15
            newfont = 25
            fontper = oldfont/newfont
            newx = x * fontper
            return newx
        def message_historyY(y):
            oldfont = 15
            newfont = 25
            fontper = oldfont/newfont
            newy = y * fontper
            return newy

        message_history = tk.Text(
            canvas,
            wrap=tk.WORD, 
            width=int(message_historyX(resizex(110.0))), 
            height=int(message_historyY(resizey(15.0))),
            font=("IBMPlexSansThaiLooped Medium", 25 * -1)
        )
        message_history.place(
            x=resizex(119.0), 
            y=resizey(203.0)
        )
        message_history.config(
            state=tk.DISABLED
        )

        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_1.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"),clearchat(),controller.show_frame("Home")],
            relief="flat"
        )
        button_1.place(
            x=resizex(462.0),
            y=resizey(599.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_1.photo = button_image_1

        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_2.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_2 clicked"),
            relief="flat"
        )
        button_2.place(
            x=resizex(1152.0),
            y=resizey(10.0),
            width=resizex(120.0),
            height=resizey(72.0)
        )
        button_2.photo = button_image_2

        button_image_3 = ImageTk.PhotoImage(
           resizeimg(relative_to_assets("button_3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),speech()],
            relief="flat"
        )
        button_3.place(
            x=resizex(1000.0),
            y=resizey(477.0),
            width=resizex(85.0),
            height=resizey(100.0)
        )
        button_3.photo = button_image_3

        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_4 clicked"),run()],
            relief="flat"
        )
        button_4.place(
            x=resizex(1100.0),
            y=resizey(477.0),
            width=resizex(84),
            height=resizey(100.0)
        )
        button_4.photo = button_image_4

class Setting(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller

        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

        import subprocess as sp
        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame9")

        NODE = MyNode()
        cmd3 = ["ros2","run","my_py_pkg","py_sound_control_node"]
        def run_sound_control(s):        
            if s == "open":
                
                proc3 = sp.Popen(cmd3)
                NODE.get_logger().info("Open")
                #NODE.srv_gui_client = NODE.create_client(srv_type=Command,srv_name="/py_ai_follow_node/send_message")
                
                #pass    
            if s == "close":
                msg = String()
                data = str("Sound_Control close")
                NODE.get_logger().info("Close")
                msg.msg = data
                NODE.pub_command.publish(msg=msg)
                #proc.terminate()
        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)
        global button1_status
        global button2_status

        button1_status = "off"
        button2_status = "off"
        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        canvas.photo = image_image_1
        """
        # button_image_1 = ImageTk.PhotoImage(
        #     resizeimg(relative_to_assets("button_1on.png")))
        # button_1 = Button(
        #     canvas,
        #     image=button_image_1,
        #     borderwidth=0,
        #     highlightthickness=0,
        #     command=lambda: print("button_1 clicked"),
        #     relief="flat"
        # )
        # button_1.place(
        #     x=resizex(105.0),
        #     y=resizey(398.0),
        #     width=resizex(519),
        #     height=resizey(122.0)
        # )
        # button_1.photo = button_image_1
        """
        def button1():
            global button_image_1
            global button1_status
            Change = True
            if Change == True:
                if button1_status == "on":
                    button_image_1 = ImageTk.PhotoImage(
                        resizeimg(relative_to_assets("button_1on.png")))
                    button_1 = Button(
                        canvas,
                        image=button_image_1,
                        borderwidth=0,
                        highlightthickness=0,
                        command=lambda: [print("button_1 clicked"),button1()],
                        relief="flat"
                    )
                    button_1.place(
                        x=resizex(105.0),
                        y=resizey(398.0),
                        width=resizex(518),
                        height=resizey(120.0)
                    )
                    button_1.photo = button_image_1
                    print("off")
                    
                    button1_status = "off"

                    Change = False
            if Change == True:
                if button1_status == "off":
                    print("on")
                    button_image_1 = ImageTk.PhotoImage(
                        resizeimg(relative_to_assets("button_1off.png")))
                    button_1 = Button(
                        canvas,
                        image=button_image_1,
                        borderwidth=0,
                        highlightthickness=0,
                        command=lambda: [print("button_1 clicked"),button1()],
                        relief="flat"
                    )
                    button_1.place(
                        x=resizex(105.0),
                        y=resizey(398.0),
                        width=resizex(518),
                        height=resizey(120.0)
                    )
                    button_1.photo = button_image_1
                    button1_status = "on"
                    Change = False
            # else:
            #     print("HI")
            
        button1()

        """
        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_2off.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: print("button_2 clicked"),
            relief="flat"
        )
        button_2.place(
            x=resizex(105.0),
            y=resizey(231.0),
            width=resizex(519),
            height=resizey(122.0)
        )
        button_2.photo = button_image_2
        """
        def button2():
            global button_image_2
            global button2_status
            Change = True
            if Change == True:
                if button2_status == "on":
                    button_image_2 = ImageTk.PhotoImage(
                        resizeimg(relative_to_assets("button_2on.png")))
                    button_2 = Button(
                        canvas,
                        image=button_image_2,
                        borderwidth=0,
                        highlightthickness=0,
                        command=lambda: [print("button_2 clicked"),button2()],
                        relief="flat"
                    )
                    button_2.place(
                        x=resizex(105.0),
                        y=resizey(231.0),
                        width=resizex(518),
                        height=resizey(120.0)
                    )
                    button_2.photo = button_image_2
                    print("off")
                    button2_status = "off"
                    run_sound_control("open")
                    Change = False
            if Change == True:
                if button2_status == "off":
                    print("on")
                    button_image_2 = ImageTk.PhotoImage(
                        resizeimg(relative_to_assets("button_2off.png")))
                    button_2 = Button(
                        canvas,
                        image=button_image_2,
                        borderwidth=0,
                        highlightthickness=0,
                        command=lambda: [print("button_2 clicked"),button2()],
                        relief="flat"
                    )
                    button_2.place(
                        x=resizex(105.0),
                        y=resizey(231.0),
                        width=resizex(518),
                        height=resizey(120.0)
                    )
                    button_2.photo = button_image_2
                    button2_status = "on"
                    run_sound_control("close")
                    Change = False
            # else:
            #     print("HI")

        button2()
            
        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),controller.show_frame("ControlArrow")],
            relief="flat"
        )
        button_3.place(
            x=resizex(748.0),
            y=resizey(231.0),
            width=resizex(434),
            height=resizey(120.0)
        )
        button_3.photo = button_image_3

        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_4 clicked"),controller.show_frame("ControlSpeed")],
            relief="flat"
        )
        button_4.place(
            x=resizex(748.0),
            y=resizey(398.0),
            width=resizex(434),
            height=resizey(120.0)
        )
        button_4.photo = button_image_4



        button_image_5 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_5.png")))
        button_5 = Button(
            canvas,
            image=button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_5 clicked"),controller.show_frame("Home")],
            relief="flat"
        )
        button_5.place(
            x=resizex(462.0),
            y=resizey(599.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_5.photo = button_image_5

class ControlArrow(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

        NODE = MyNode()
        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame10")


        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)

        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 720,
            width = 1280,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )
        canvas.photo = image_image_1

        button_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_1.png")))
        button_1 = Button(
            canvas,
            image=button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_1 clicked"),NODE.call_srv_direction_client("Forward")],
            relief="flat"
        )
        button_1.place(
            x=resizex(578),
            y=resizey(201.0),
            width=resizex(123),
            height=resizey(120)
        )
        button_1.photo = button_image_1

        button_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_2.png")))
        button_2 = Button(
            canvas,
            image=button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_2 clicked"),NODE.call_srv_direction_client("Stop")],
            relief="flat"
        )
        button_2.place(
            x=resizex(578),
            y=resizey(329),
            width=resizex(123),
            height=resizey(120)
        )
        button_2.photo = button_image_2

        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),NODE.call_srv_direction_client("Backward")],
            relief="flat"
        )
        button_3.place(
            x=resizex(578),
            y=resizey(457),
            width=resizex(123),
            height=resizey(120)
        )
        button_3.photo = button_image_3

        button_image_4 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_4.png")))
        button_4 = Button(
            canvas,
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_4 clicked"),NODE.call_srv_direction_client("TrunLeft")],
            relief="flat"
        )
        button_4.place(
            x=resizex(440.0),
            y=resizey(331),
            width=resizex(123),
            height=resizey(120)
        )
        button_4.photo = button_image_4

        button_image_5 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_5.png")))
        button_5 = Button(
            canvas,
            image=button_image_5,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_5 clicked"),NODE.call_srv_direction_client("TrunRight")],
            relief="flat"
        )
        button_5.place(
            x=resizex(717),
            y=resizey(331),
            width=resizex(123),
            height=resizey(120)
        )
        button_5.photo = button_image_5

        button_image_6 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_6.png")))
        button_6 = Button(
            canvas,
            image=button_image_6,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_6 clicked"),controller.show_frame("Setting")],
            relief="flat"
        )
        button_6.place(
            x=resizex(462.0),
            y=resizey(593.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_6.photo = button_image_6

        
        # button_image_7 = ImageTk.PhotoImage(
        #     resizeimg(relative_to_assets("button_7.png")))
        # button_7 = Button(
        #     canvas,
        #     image=button_image_7,
        #     borderwidth=0,
        #     highlightthickness=0,
        #     command=lambda: print("button_7 clicked"),
        #     relief="flat"
        # )
        # button_7.place(
        #     x=resizex(1152.0),
        #     y=resizey(10.0),
        #     width=resizex(121.0),
        #     height=resizey(72.0)
        # )
        # button_7.photo = button_image_7
        
speed1 = 20
speed2 = 20
class ControlSpeed(tk.Frame):
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
        self.controller = controller
        from pathlib import Path

        # from tkinter import *
        # Explicit imports to satisfy Flake8
        from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage,Scale,ttk


        NODE = MyNode()
        OUTPUT_PATH = Path(__file__).parent
        ASSETS_PATH = OUTPUT_PATH / Path(r"buildMain/assets/frame11")


        def relative_to_assets(path: str) -> Path:
            return ASSETS_PATH / Path(path)

        canvas = Canvas(
            self,
            bg = "#4986A1",
            height = 600,
            width = 1024,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        canvas.place(x = 0, y = 0)
        image_image_1 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_1.png")))
        image_1 = canvas.create_image(
            resizex(640.0),
            resizey(93.0),
            image=image_image_1
        )

        image_image_2 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_2.png")))
        image_2 = canvas.create_image(
            
            resizex(640.0),
            resizey(270.0),
            image=image_image_2
        )
        image_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("image_3.png")))
        image_3 = canvas.create_image(
            resizex(640.0),
            resizey(420.0),
            image=image_image_3
        )
        canvas.photo=[image_image_1,image_image_2,image_image_3]
        # w = Scale(window, from_=0, to=200,orient="horizontal" )
        # w.place(x=640,y=270)
        
        def send_speed():
            global speed1
            global speed2
            speed1 = int(var1.get())
            speed2 = int(var2.get())
            print(speed1,speed2)
            NODE.call_srv_speed_client(spd1=speed1,spd2=speed2)
            
        #send_speed()    
        var1 = IntVar()
        var2 = IntVar()
        scale_widget_variable = Scale(
        canvas,
        activebackground = "lightgrey",
        bg="white",
        digits=1,
        troughcolor="gray",
        length=150,
        orient="horizontal",
        highlightbackground="#FFFFFF",
        resolution=5,
        variable=var1,
        )
        scale_widget_variable.set(20)
        scale_widget_variable.place(x=resizex(500),y=resizey(240),width=resizex(650),height=resizey(50))
        # print(var.get())

        scale_widget_variable2 = Scale(
        canvas,
        activebackground = "lightgrey",
        bg="white",
        digits=1,
        troughcolor="gray",
        length=150,
        orient="horizontal",
        highlightbackground="#FFFFFF",
        resolution=5,
        variable=var2,
        )
        scale_widget_variable2.set(20)
        scale_widget_variable2.place(x=resizex(500),y=resizey(390),width=resizex(650),height=resizey(50))

        button_image_3 = ImageTk.PhotoImage(
            resizeimg(relative_to_assets("button_3.png")))
        button_3 = Button(
            canvas,
            image=button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=lambda: [print("button_3 clicked"),send_speed(),
            controller.show_frame("Setting")],
            relief="flat"
        )
        button_3.place(
            x=resizex(462.0),
            y=resizey(599.0),
            width=resizex(355.0),
            height=resizey(90.0)
        )
        button_3.photo = button_image_3

app = None

def page(input_sound_data):
    global app
    if input_sound_data == "Open Home":
        app.show_frame("Home")
    if input_sound_data == "Open Setting":
        app.show_frame("Setting")
    if input_sound_data == "Open Hello":
        app.show_frame("SayHi")
    if input_sound_data == "Open Follow":
        app.show_frame("Follow")
    if input_sound_data == "Open Teacher":
        app.show_frame("Teacher")
    if input_sound_data == "Open Position":
        app.show_frame("PosMain")
    if input_sound_data == "Open Ask":
        app.show_frame("Ask")
    if input_sound_data == "Open TeacherC":
        app.show_frame("TeacherC")
    if input_sound_data == "Open TeacherS":
        app.show_frame("TeacherS")
    if input_sound_data == "TeacherC 1":
        TeacherSelect("C1")
        app.show_frame("TeacherShow")
    if input_sound_data == "TeacherC 2":
        TeacherSelect("C2")
        app.show_frame("TeacherShow")
    if input_sound_data == "TeacherC 3":
        TeacherSelect("C3")
        app.show_frame("TeacherShow")
    if input_sound_data == "TeacherS 1":
        TeacherSelect("S1")
        app.show_frame("TeacherShow")
    if input_sound_data == "TeacherS 2":
        TeacherSelect("S2")
        app.show_frame("TeacherShow")
    if input_sound_data == "TeacherS 3":
        TeacherSelect("S3")
        app.show_frame("TeacherShow")
    if input_sound_data == "Position MainHall":
        Position("MainHall")
        app.show_frame("Pos")
    if input_sound_data == "Position ManToilet":
        Position("ManToilet")
        app.show_frame("Pos")
    if input_sound_data == "Position WomanToilet":
        Position("WomanToilet")
        app.show_frame("Pos")
    
    if input_sound_data == "Hello Start":
        run_ai_sayhi("open")
        pass
    if input_sound_data == "Follow Start":
        run_ai_follow("open")
        pass
    if input_sound_data == "Position Start":
        run_ai_pos("open")
        pass
        #run func start
    if input_sound_data == "Hello Stop":
        run_ai_sayhi("close")
        pass
    if input_sound_data == "Follow Stop":
        run_ai_follow("close")
        pass
    if input_sound_data == "Position Stop":
        run_ai_pos("close")
        pass
        #run func stop
    if input_sound_data == "Back":
        app.show_frame("Home")
    if "question is" in input_sound_data:
        send_bot_text = input_sound_data.split("question is")
        go_text = str(send_bot_text[1])
        gemini(go_text)    
    else :
        pass
        
    
    
    
    

def when_close():
    global stoprun
    global app
    stoprun = True
    NODE = MyNode()
    msg = String()
    data = str("ALL close")
    msg.msg = data
    NODE.pub_command.publish(msg=msg)
    app.update()
    NODE.destroy_node()
    rclpy.shutdown()
    #while stoprun == True:
    
    
stoprun = False
def main():
    global stoprun
    global app
    global sound_data
    #if stoprun == False:
    rclpy.init()

    NODE = MyNode()
    thread_spin = threading.Thread(target=rclpy.spin,args=(NODE, ))
    thread_spin.start()

    app = Start()
    app.attributes('-fullscreen', True)
    app.bind('<Destroy>',lambda event:when_close())
    #app.protocol("WM_DELETE",when_close)
    app.mainloop()
    NODE.destroy_node()
    rclpy.shutdown()
    thread_spin.join()
    #if stoprun == True:
    #    NODE.destroy_node()
    #    rclpy.shutdown()
   #     thread_spin.join()
   #     #app.destroy()
   #     app.update()
    #    pass
    
if __name__ == '__main__':
	main()
    
